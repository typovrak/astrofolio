---
import { ViewTransitions } from 'astro:transitions';
import {SITE} from "@consts";

interface Props {
  title: string;
  description: string;
  keywords: string[];
  logoId: number;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title,
  description,
  keywords,
  logoId,
  image = '/open-graph.png',
} = Astro.props;

const removeTrailingSlash = (url: string) => url.replace(/\/$/, '');
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link
  rel="icon"
  type="image/x-icon"
  href={`/logos/${logoId}/favicon-${logoId}.ico`}
/>
<meta name="generator" content={Astro.generator} />
<meta name="color-scheme" content="light dark" />

<link
  rel="preload"
  href="/fonts/atkinson-regular.woff"
  as="font"
  type="font/woff"
  crossorigin
/>
<link
  rel="preload"
  href="/fonts/atkinson-bold.woff"
  as="font"
  type="font/woff"
  crossorigin
/>

<link rel="canonical" href={removeTrailingSlash(canonicalURL.href)} />

<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="keywords" content={keywords.join(',')} />
<meta name="author" content={SITE.AUTHOR}>

<meta property="og:type" content="website" />
<meta property="og:url" content={removeTrailingSlash(Astro.url.href)} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />
<meta
  property="og:image:alt"
  content="Morgan SCHOLZ, Développeur Web Freelance"
/>

<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={removeTrailingSlash(Astro.url.href)} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<meta
  name="google-site-verification"
  content="U2s5UT9tLGLVkYr_SOXpyTw0Z_U1vIVGjnjtLL4Qcoc"
/>
<script
  is:inline
  async
  src="https://www.googletagmanager.com/gtag/js?id=G-RLYBJBEERS"></script>
<script>
  // @ts-ignore
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    // @ts-ignore
    dataLayer.push(arguments);
  }
  // @ts-ignore
  gtag('js', new Date());
  // @ts-ignore
  gtag('config', 'G-RLYBJBEERS');
</script>
<script>
  (function (h, o, t, j, a, r) {
    // @ts-ignore
    h.hj =
      // @ts-ignore
      h.hj ||
      function () {
        // @ts-ignore
        (h.hj.q = h.hj.q || []).push(arguments);
      };
    // @ts-ignore
    h._hjSettings = { hjid: 5046086, hjsv: 6 };
    // @ts-ignore
    a = o.getElementsByTagName('head')[0];
    // @ts-ignore
    r = o.createElement('script');
    // @ts-ignore
    r.async = 1;
    // @ts-ignore
    r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
    // @ts-ignore
    a.appendChild(r);
  })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');
</script>

<link rel="sitemap" href="/sitemap-index.xml" />

<link
  rel="alternate"
  type="application/rss+xml"
  title={title}
  href={`${Astro.site}rss.xml`}
/>

<script is:inline src="/js/theme.js"></script>
<script is:inline src="/js/scroll.js"></script>
<script is:inline src="/js/animate.js"></script>

<ViewTransitions />

<script>
import type { TransitionBeforeSwapEvent } from 'astro:transitions/client';

  document.addEventListener('DOMContentLoaded', async () => {
    const initPerPage = async () => {
      await fetch('/api/tracking', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          pathname: window.location.pathname,
          details: JSON.stringify({
            heigth: window.innerHeight ?? null,
            width: window.innerWidth ?? null,
            performance: window.performance || {},
            screen: {
              height: window.screen.height ?? null,
              width: window.screen.width ?? null,
              availHeight: window.screen.availHeight ?? null,
              availWidth: window.screen.availWidth ?? null,
              // @ts-ignore
              availLeft: window.screen.availLeft ?? null,
              // @ts-ignore
              availTop: window.screen.availTop ?? null,
              orientation: {
                angle: window.screen.orientation.angle ?? null,
                type: window.screen.orientation.type || null,
              },
              colorDepth: window.screen.colorDepth ?? null,
              pixelDepth: window.screen.pixelDepth ?? null,
              // @ts-ignore
              isExtended: window.screen.isExtended ?? null,
            },
          }),
        }),
      });

      const updateCardsCount = () => {
        const cards = document.querySelectorAll('[data-collection][data-slug]');
  
        if(cards.length) {
          const setPathnameCount = (): undefined => {
            const pathnamesCountString = window.localStorage.getItem('pathnamesCount');
            if(!pathnamesCountString) return;
          
            const pathnamesCount = JSON.parse(pathnamesCountString);
  
            for(let i=0; i<cards.length; i++) {
              const collection = cards[i].getAttribute('data-collection');
              const slug = cards[i].getAttribute('data-slug');
              if(!collection || !slug) continue;
    
              const item: Array<{pathname: string, count: number}> = pathnamesCount.filter(({pathname} : {pathname:string, count:number}) => pathname === `/${collection}/${slug}`);
              if(!item.length) continue;
            
              const view = document.getElementById(`${collection}-${slug}`);
              if(!view) continue;
            
              const count = item[0].count ?? 0;
              view.textContent = `${count} vue${count > 1 ? 's' : '' }`;
              continue;
            }
          }
          
          setPathnameCount();
        }
      }

      updateCardsCount();
      setTimeout(updateCardsCount,100);
      setTimeout(updateCardsCount,250);
      setTimeout(updateCardsCount,500);
      

      const res = await fetch('https://mscholz.dev/api/views', {method:'GET'});
      const pathnamesCount = JSON.stringify(await res.json());
      window.localStorage.setItem('pathnamesCount', pathnamesCount);
    };

    initPerPage();
    document.addEventListener('astro:after-swap', initPerPage);

    document.addEventListener('astro:before-swap', (e) =>
      [
        ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
          'link[as="font"]',
        ),
      ].forEach((link) => link.remove()),
    );

    const logoStyle = (logo: string) => `
      background-image: url(${`data:image/svg+xml;base64,${btoa(logo)}`});
      background-repeat: no-repeat;
      background-size: 32px;
      color: white;
      font-family: sans-serif;
      font-size: 32px;
      padding-left: 42px;
    `;

    const logo1 = await (await fetch(`/logos/1/logo-1.svg`)).text();
    console.info('%cCréé par Morgan Scholz avec ❤️', logoStyle(logo1));

    const logo2 = await (await fetch(`/logos/2/logo-2.svg`)).text();
    console.info('%chttps://mscholz.dev', logoStyle(logo2));

    const logo3 = await (await fetch(`/logos/3/logo-3.svg`)).text();
    console.info('%cmscholz.dev@gmail.com', logoStyle(logo3));
  });
</script>
